/// <reference types="node" />
import http from 'http';
import { CreateApiKeyRequest } from '../model/createApiKeyRequest';
import { CreateApiKeyResponse } from '../model/createApiKeyResponse';
import { CreateSubAccount } from '../model/createSubAccount';
import { CreateSubAccountResponse } from '../model/createSubAccountResponse';
import { GetAccountActivity } from '../model/getAccountActivity';
import { GetSsoToken } from '../model/getSsoToken';
import { MasterDetailsResponse } from '../model/masterDetailsResponse';
import { SsoTokenRequest } from '../model/ssoTokenRequest';
import { SubAccountAppsToggleRequest } from '../model/subAccountAppsToggleRequest';
import { SubAccountDetailsResponse } from '../model/subAccountDetailsResponse';
import { SubAccountUpdatePlanRequest } from '../model/subAccountUpdatePlanRequest';
import { SubAccountsResponse } from '../model/subAccountsResponse';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum MasterAccountApiApiKeys {
    apiKey = 0,
    partnerKey = 1
}
export declare class MasterAccountApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        apiKey: ApiKeyAuth;
        partnerKey: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: MasterAccountApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    corporateMasterAccountGet(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MasterDetailsResponse;
    }>;
    corporateSubAccountGet(offset: number, limit: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SubAccountsResponse;
    }>;
    corporateSubAccountIdApplicationsTogglePut(id: number, toggleApplications: SubAccountAppsToggleRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    corporateSubAccountIdDelete(id: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    corporateSubAccountIdGet(id: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SubAccountDetailsResponse;
    }>;
    corporateSubAccountIdPlanPut(id: number, updatePlanDetails: SubAccountUpdatePlanRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    corporateSubAccountKeyPost(createApiKeyRequest: CreateApiKeyRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CreateApiKeyResponse;
    }>;
    corporateSubAccountPost(subAccountCreate: CreateSubAccount, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CreateSubAccountResponse;
    }>;
    corporateSubAccountSsoTokenPost(ssoTokenRequest: SsoTokenRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: GetSsoToken;
    }>;
    getAccountActivity(startDate?: string, endDate?: string, limit?: number, offset?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: GetAccountActivity;
    }>;
}
